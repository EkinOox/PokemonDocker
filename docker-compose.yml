services:
  frontend-docker:
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    container_name: frontend-docker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - VITE_HOST=0.0.0.0
      - API_URL=http://backend:${BACKEND_PORT}
    depends_on:
      - backend-docker
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - front-back
    healthcheck:
      test: [ "CMD", "curl", "-f", "10.0.3.16" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  backend-docker:
    build:
      context: ./backend
      dockerfile: dev.Dockerfile
    container_name: backend-docker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      DATABASE_URL: "mysql://pokemon_user:pokemon_password@mariadb:${MARIADB_PORT}/pokemon"
    depends_on:
      - mariadb-docker
    networks:
      - back-db
      - front-back
    healthcheck:
      test: [ "CMD", "curl", "-f", "10.0.2.43" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  mariadb-docker:
    image: mariadb:10.5
    container_name: mariadb-docker
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: pokemon
      MYSQL_USER: pokemon_user
      MYSQL_PASSWORD: pokemon_password
    volumes:
      - db_data_pokemon:/var/lib/mysql
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - back-db
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "--silent" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  phpmyadmin-docker:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin-docker
    environment:
      PMA_HOST: mariadb
      PMA_PORT: ${MARIADB_PORT}
      MYSQL_ROOT_PASSWORD: root_password
    networks:
      - back-db
    healthcheck:
      test: [ "CMD", "curl", "-f", "10.0.2.41" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  uptime-kuma-docker:
    image: louislam/uptime-kuma
    container_name: uptime-kuma-docker
    ports:
      - "${UPTIME_KUMA_PORT}:${UPTIME_KUMA_PORT}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - back-db
      - front-back
    volumes:
      - uptime-kuma-data:/app/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${UPTIME_KUMA_PORT}" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  portainer-docker:
    image: portainer/portainer-ce:latest
    container_name: portainer-docker
    restart: "no"
    ports:
      - "${PORTAINER_PORT}:${PORTAINER_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - front-back
      - back-db
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  back-db:
    driver: overlay
    driver_opts:
      encrypted: "true"
    attachable: true 
  front-back:
    driver: overlay
    driver_opts:
      encrypted: "true"
    attachable: true


volumes:
  db_data_pokemon:
  uptime-kuma-data:
  portainer_data:
